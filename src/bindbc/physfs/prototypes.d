/*
Copyright (c) 2025 Timur Gafarov.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module bindbc.physfs.prototypes;

import bindbc.physfs.types;

extern(C) @nogc nothrow
{
    // 2.0 API
    alias da_PHYSFS_getLinkedVersion = void function(PHYSFS_Version* ver);
    alias da_PHYSFS_init = int function(const(char)* argv0);
    alias da_PHYSFS_deinit = int function();
    alias da_PHYSFS_supportedArchiveTypes = const(PHYSFS_ArchiveInfo*)* function();
    alias da_PHYSFS_freeList = void function(void* listVar);
    alias da_PHYSFS_getLastError = const(char)* function();
    alias da_PHYSFS_getDirSeparator = const(char)* function();
    alias da_PHYSFS_permitSymbolicLinks = void function(int allow);
    alias da_PHYSFS_getCdRomDirs = char** function();
    alias da_PHYSFS_getBaseDir = const(char)* function();
    alias da_PHYSFS_getUserDir = const(char)* function();
    alias da_PHYSFS_getWriteDir = const(char)* function();
    alias da_PHYSFS_setWriteDir = int function(const(char)* newDir);
    alias da_PHYSFS_addToSearchPath = int function(const(char)* newDir, int appendToPath);
    alias da_PHYSFS_removeFromSearchPath = int function(const(char)* oldDir);
    alias da_PHYSFS_getSearchPath = char** function();
    alias da_PHYSFS_setSaneConfig = int function(
        const(char)* organization,
        const(char)* appName,
        const(char)* archiveExt,
        int includeCdRoms,
        int archivesFirst);
    alias da_PHYSFS_mkdir = int function(const(char)* dirName);
    alias da_PHYSFS_delete = int function(const(char)* filename);
    alias da_PHYSFS_getRealDir = const(char)* function(const(char)* filename);
    alias da_PHYSFS_enumerateFiles = char** function(const(char)* dir);
    alias da_PHYSFS_exists = int function(const(char)* fname);
    alias da_PHYSFS_isDirectory = int function(const(char)* fname);
    alias da_PHYSFS_isSymbolicLink = int function(const(char)* fname);
    alias da_PHYSFS_getLastModTime = PHYSFS_sint64 function(const(char)* filename);
    alias da_PHYSFS_openWrite = PHYSFS_File* function(const(char)* filename);
    alias da_PHYSFS_openAppend = PHYSFS_File* function(const(char)* filename);
    alias da_PHYSFS_openRead = PHYSFS_File* function(const(char)* filename);
    alias da_PHYSFS_close = int function(PHYSFS_File* handle);
    alias da_PHYSFS_read = PHYSFS_sint64 function(
        PHYSFS_File* handle,
        void* buffer,
        PHYSFS_uint32 objSize,
        PHYSFS_uint32 objCount);
    alias da_PHYSFS_write = PHYSFS_sint64 function(
        PHYSFS_File* handle,
        const(void)* buffer,
        PHYSFS_uint32 objSize,
        PHYSFS_uint32 objCount);
    alias da_PHYSFS_eof = int function(PHYSFS_File* handle);
    alias da_PHYSFS_tell = PHYSFS_sint64 function(PHYSFS_File* handle);
    alias da_PHYSFS_seek = int function(PHYSFS_File* handle, PHYSFS_uint64 pos);
    alias da_PHYSFS_fileLength = PHYSFS_sint64 function(PHYSFS_File* handle);
    alias da_PHYSFS_setBuffer = int function(PHYSFS_File* handle, PHYSFS_uint64 bufsize);
    alias da_PHYSFS_flush = int function(PHYSFS_File* handle);
    alias da_PHYSFS_swapSLE16 = PHYSFS_sint16 function(PHYSFS_sint16 val);
    alias da_PHYSFS_swapULE16 = PHYSFS_uint16 function(PHYSFS_uint16 val);
    alias da_PHYSFS_swapSLE32 = PHYSFS_sint32 function(PHYSFS_sint32 val);
    alias da_PHYSFS_swapULE32 = PHYSFS_uint32 function(PHYSFS_uint32 val);
    alias da_PHYSFS_swapSLE64 = PHYSFS_sint64 function(PHYSFS_sint64 val);
    alias da_PHYSFS_swapULE64 = PHYSFS_uint64 function(PHYSFS_uint64 val);
    alias da_PHYSFS_swapSBE16 = PHYSFS_sint16 function(PHYSFS_sint16 val);
    alias da_PHYSFS_swapUBE16 = PHYSFS_uint16 function(PHYSFS_uint16 val);
    alias da_PHYSFS_swapSBE32 = PHYSFS_sint32 function(PHYSFS_sint32 val);
    alias da_PHYSFS_swapUBE32 = PHYSFS_uint32 function(PHYSFS_uint32 val);
    alias da_PHYSFS_swapSBE64 = PHYSFS_sint64 function(PHYSFS_sint64 val);
    alias da_PHYSFS_swapUBE64 = PHYSFS_sint64 function(PHYSFS_uint64 val);
    alias da_PHYSFS_readSLE16 = int function(PHYSFS_File* file, PHYSFS_sint16* val);
    alias da_PHYSFS_readULE16 = int function(PHYSFS_File* file, PHYSFS_uint16* val);
    alias da_PHYSFS_readSLE32 = int function(PHYSFS_File* file, PHYSFS_sint32* val);
    alias da_PHYSFS_readULE32 = int function(PHYSFS_File* file, PHYSFS_uint32* val);
    alias da_PHYSFS_readSLE64 = int function(PHYSFS_File* file, PHYSFS_sint64* val);
    alias da_PHYSFS_readULE64 = int function(PHYSFS_File* file, PHYSFS_uint64* val);
    alias da_PHYSFS_readSBE16 = int function(PHYSFS_File* file, PHYSFS_sint16* val);
    alias da_PHYSFS_readUBE16 = int function(PHYSFS_File* file, PHYSFS_uint16* val);
    alias da_PHYSFS_readSBE32 = int function(PHYSFS_File* file, PHYSFS_sint32* val);
    alias da_PHYSFS_readUBE32 = int function(PHYSFS_File* file, PHYSFS_uint32* val);
    alias da_PHYSFS_readSBE64 = int function(PHYSFS_File* file, PHYSFS_sint64* val);
    alias da_PHYSFS_readUBE64 = int function(PHYSFS_File* file, PHYSFS_uint64* val);
    alias da_PHYSFS_writeSLE16 = int function(PHYSFS_File* file, PHYSFS_sint16 val);
    alias da_PHYSFS_writeULE16 = int function(PHYSFS_File* file, PHYSFS_uint16 val);
    alias da_PHYSFS_writeSLE32 = int function(PHYSFS_File* file, PHYSFS_sint32 val);
    alias da_PHYSFS_writeULE32 = int function(PHYSFS_File* file, PHYSFS_uint32 val);
    alias da_PHYSFS_writeSLE64 = int function(PHYSFS_File* file, PHYSFS_sint64 val);
    alias da_PHYSFS_writeULE64 = int function(PHYSFS_File* file, PHYSFS_uint64 val);
    alias da_PHYSFS_writeSBE16 = int function(PHYSFS_File* file, PHYSFS_sint16 val);
    alias da_PHYSFS_writeUBE16 = int function(PHYSFS_File* file, PHYSFS_uint16 val);
    alias da_PHYSFS_writeSBE32 = int function(PHYSFS_File* file, PHYSFS_sint32 val);
    alias da_PHYSFS_writeUBE32 = int function(PHYSFS_File* file, PHYSFS_uint32 val);
    alias da_PHYSFS_writeSBE64 = int function(PHYSFS_File* file, PHYSFS_sint64 val);
    alias da_PHYSFS_writeUBE64 = int function(PHYSFS_File* file, PHYSFS_uint64 val);
    alias da_PHYSFS_isInit = int function();
    alias da_PHYSFS_symbolicLinksPermitted = int function();
    alias da_PHYSFS_setAllocator = int function(const(PHYSFS_Allocator)* allocator);
    alias da_PHYSFS_mount = int function(const(char)* newDir, const(char)* mountPoint, int appendToPath);
    alias da_PHYSFS_getMountPoint = const(char)* function(const(char)* dir);
    alias da_PHYSFS_getCdRomDirsCallback = void function(PHYSFS_StringCallback c, void* d);
    alias da_PHYSFS_getSearchPathCallback = void function(PHYSFS_StringCallback c, void*d );
    alias da_PHYSFS_enumerateFilesCallback = void function(const(char)* *dir, PHYSFS_EnumFilesCallback c, void* d);
    alias da_PHYSFS_utf8FromUcs4 = void function(const(PHYSFS_uint32)* src, char* dst, PHYSFS_uint64 len);
    alias da_PHYSFS_utf8ToUcs4 = void function(const(char)* src, PHYSFS_uint32* dst, PHYSFS_uint64 len);
    alias da_PHYSFS_utf8FromUcs2 = void function(const(PHYSFS_uint16)* src, char* dst, PHYSFS_uint64 len);
    alias da_PHYSFS_utf8ToUcs2 = void function(const(char)* src, PHYSFS_uint16* dst, PHYSFS_uint64 len);
    alias da_PHYSFS_utf8FromLatin1 = void function(const(char)* src, char*dst, PHYSFS_uint64 len);
    
    // 2.1 API
    alias da_PHYSFS_caseFold = int function(const PHYSFS_uint32 from, PHYSFS_uint32 *to);
    alias da_PHYSFS_utf8stricmp = int function(const(char)* str1, const(char)* str2);
    alias da_PHYSFS_utf16stricmp = int function(const(PHYSFS_uint16)* str1, const(PHYSFS_uint16)* str2);
    alias da_PHYSFS_ucs4stricmp = int function(const(PHYSFS_uint32)* str1, const(PHYSFS_uint32)* str2);
    alias da_PHYSFS_enumerate = int function(const(char)* dir, PHYSFS_EnumerateCallback c, void* d);
    alias da_PHYSFS_unmount = int function(const(char)* oldDir);
    alias da_PHYSFS_getAllocator = const(PHYSFS_Allocator)* function();
    alias da_PHYSFS_stat = int function(const(char)* fname, PHYSFS_Stat* stat);
    alias da_PHYSFS_utf8FromUtf16 = void function(const(PHYSFS_uint16)* src, char* dst, PHYSFS_uint64 len);
    alias da_PHYSFS_utf8ToUtf16 = void function(const(char)* src, PHYSFS_uint16* dst, PHYSFS_uint64 len);
    alias da_PHYSFS_readBytes = PHYSFS_sint64 function(PHYSFS_File* handle, void* buffer, PHYSFS_uint64 len);
    alias da_PHYSFS_writeBytes = PHYSFS_sint64 function(PHYSFS_File*handle, const(void)* buffer, PHYSFS_uint64 len);
    alias da_PHYSFS_mountIo = int function(PHYSFS_Io* io, const(char)* newDir, const(char)* mountPoint, int appendToPath);
    alias da_PHYSFS_mountMemory = int function(
        const(void)* buf,
        PHYSFS_uint64 len,
        UnmountCallback del,
        const(char)* newDir,
        const(char)* mountPoint,
        int appendToPath);
    alias da_PHYSFS_mountHandle = int function(
        PHYSFS_File* file,
        const(char)* newDir,
        const(char)* mountPoint,
        int appendToPath);
    alias da_PHYSFS_getLastErrorCode = PHYSFS_ErrorCode function();
    alias da_PHYSFS_getErrorByCode = const(char)* function(PHYSFS_ErrorCode code);
    alias da_PHYSFS_setErrorCode = void function(PHYSFS_ErrorCode code);
    alias da_PHYSFS_getPrefDir = const(char)* function(const(char)* org, const(char)* app);
    alias da_PHYSFS_registerArchiver = int function(const(PHYSFS_Archiver)* archiver);
    alias da_PHYSFS_deregisterArchiver = int function(const(char)* ext);
    alias da_PHYSFS_setRoot = int function(const(char)* archive, const(char)* subdir);
}
